import tkinter as tk
from tkinter import ttk, messagebox
import matplotlib.pyplot as plt
import numpy as np
import os
from datetime import datetime

class MPEWizardApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Mock Personality Evaluator (MPE)")
        self.geometry("700x500")
        self.resizable(False, False)

        self.container = tk.Frame(self)
        self.container.pack(fill="both", expand=True)

        self.pages = []
        self.current_index = 0
        self.user_answers = {}

        self.build_pages()
        self.show_page(0)

    def build_pages(self):
        self.pages = [
            WelcomePage(self.container, self),
            CommunicationPage(self.container, self),
            PhysiquePage(self.container, self),
            AthleticPage(self.container, self),
            DisciplinePage(self.container, self),
            AdaptabilityPage(self.container, self),
            IntelligencePage(self.container, self),
            ReviewPage(self.container, self)
        ]
        for page in self.pages:
            page.grid(row=0, column=0, sticky="nsew")

    def show_page(self, index):
        self.current_index = index
        page = self.pages[index]
        page.tkraise()

    def next_page(self):
        if self.current_index + 1 < len(self.pages):
            self.show_page(self.current_index + 1)

    def prev_page(self):
        if self.current_index > 0:
            self.show_page(self.current_index - 1)

    def generate_radar_chart(self):
        traits = ['Communication Skills', 'Overall Physique', 'Athletic Ability', 'Discipline', 'Adaptability', 'Overall Intelligence']
        scores = [np.mean(self.user_answers[t]) for t in traits]

        labels = np.array(traits)
        stats = np.array(scores)
        angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()
        stats = np.concatenate((stats, [stats[0]]))
        angles += angles[:1]

        fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))
        ax.plot(angles, stats, 'o-', linewidth=2)
        ax.fill(angles, stats, alpha=0.25)
        ax.set_yticks(range(1, 6))
        ax.set_yticklabels(['1', '2', '3', '4', '5'])
        ax.set_xticks(angles[:-1])
        ax.set_xticklabels(labels)

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"mpe_radar_chart_{timestamp}.png"
        plt.savefig(filename)
        plt.close()

        return filename, np.mean(scores)

class WelcomePage(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller
        label = ttk.Label(self, text="Welcome to the Mock Personality Evaluator", font=("Helvetica", 18))
        label.pack(pady=40)

        start_btn = ttk.Button(self, text="Start", command=lambda: controller.next_page())
        start_btn.pack(pady=10)

class TraitPage(tk.Frame):
    def __init__(self, parent, controller, title, questions, trait_key):
        super().__init__(parent)
        self.controller = controller
        self.trait_key = trait_key
        self.vars = []

        ttk.Label(self, text=title, font=("Helvetica", 16)).pack(pady=10)
        for q in questions:
            frame = ttk.LabelFrame(self, text=q)
            frame.pack(fill="x", padx=20, pady=5)
            var = tk.IntVar()
            self.vars.append(var)
            for i in range(1, 6):
                ttk.Radiobutton(frame, text=str(i), variable=var, value=i).pack(side="left")

        nav = ttk.Frame(self)
        nav.pack(pady=20)
        ttk.Button(nav, text="Previous", command=controller.prev_page).pack(side="left", padx=10)
        ttk.Button(nav, text="Next", command=self.save_and_next).pack(side="left", padx=10)

    def save_and_next(self):
        self.controller.user_answers[self.trait_key] = [v.get() for v in self.vars if v.get() != 0]
        if len(self.controller.user_answers[self.trait_key]) != len(self.vars):
            messagebox.showwarning("Incomplete", "Please answer all questions.")
            return
        self.controller.next_page()

class CommunicationPage(TraitPage):
    def __init__(self, parent, controller):
        questions = [
            "Do you find it easy to express yourself in conversations?",
            "Can you listen attentively to others?",
            "Are you comfortable speaking in public?"
        ]
        super().__init__(parent, controller, "Communication Skills", questions, "Communication Skills")

class PhysiquePage(TraitPage):
    def __init__(self, parent, controller):
        questions = [
            "Do you engage in any regular physical activity?",
            "Do you feel fit compared to others of your age and gender?",
            "Do you maintain a balanced diet and lifestyle?"
        ]
        super().__init__(parent, controller, "Overall Physique", questions, "Overall Physique")

class AthleticPage(TraitPage):
    def __init__(self, parent, controller):
        questions = [
            "How would you rate your strength?",
            "How would you rate your stamina?",
            "How would you rate your agility?"
        ]
        super().__init__(parent, controller, "Athletic Ability", questions, "Athletic Ability")

class DisciplinePage(TraitPage):
    def __init__(self, parent, controller):
        questions = [
            "Do you complete tasks you start without procrastinating?",
            "Do you follow your own set routines or schedules?",
            "Do you consider yourself self-motivated?"
        ]
        super().__init__(parent, controller, "Discipline", questions, "Discipline")

class AdaptabilityPage(TraitPage):
    def __init__(self, parent, controller):
        questions = [
            "Do you handle sudden changes in plans well?",
            "Can you work efficiently in new or unfamiliar environments?",
            "Do you easily adjust to new people or social groups?"
        ]
        super().__init__(parent, controller, "Adaptability", questions, "Adaptability")

class IntelligencePage(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller
        self.vars = []
        ttk.Label(self, text="Overall Intelligence", font=("Helvetica", 16)).pack(pady=10)

        questions = [
            "How confident are you in solving complex problems?",
            "How good are you at understanding new concepts quickly?",
            "Do you have emotional intelligence?"
        ]
        options_q3 = [
            ("Yes", 5),
            ("I like to think that I do", 4),
            ("I really hope I do", 3),
            ("Not really", 1)
        ]

        for q in questions[:2]:
            frame = ttk.LabelFrame(self, text=q)
            frame.pack(fill="x", padx=20, pady=5)
            var = tk.IntVar()
            self.vars.append(var)
            for i in range(1, 6):
                ttk.Radiobutton(frame, text=str(i), variable=var, value=i).pack(side="left")

        self.q3_var = tk.IntVar()
        frame_q3 = ttk.LabelFrame(self, text=questions[2])
        frame_q3.pack(fill="x", padx=20, pady=5)
        for text, val in options_q3:
            ttk.Radiobutton(frame_q3, text=text, variable=self.q3_var, value=val).pack(side="left")

        self.q4_var = tk.IntVar()
        self.q4_frame = ttk.LabelFrame(self, text="Are you sure about your above answer?")
        self.q4_frame.pack_forget()
        self.q4_yes = ttk.Radiobutton(self.q4_frame, text="Yes", variable=self.q4_var, value=5)
        self.q4_no = ttk.Radiobutton(self.q4_frame, text="No", variable=self.q4_var, value=2)

        nav = ttk.Frame(self)
        nav.pack(pady=20)
        ttk.Button(nav, text="Previous", command=controller.prev_page).pack(side="left", padx=10)
        ttk.Button(nav, text="Next", command=self.save_and_next).pack(side="left", padx=10)

        self.q3_var.trace_add("write", self.update_q4_display)

    def update_q4_display(self, *args):
        val = self.q3_var.get()
        if val >= 4:
            self.q4_frame.pack(fill="x", padx=20, pady=5)
            self.q4_yes.pack(side="left")
            self.q4_no.pack(side="left")
        else:
            self.q4_frame.pack_forget()

    def save_and_next(self):
        values = [v.get() for v in self.vars if v.get() != 0]
        if len(values) < len(self.vars):
            messagebox.showwarning("Incomplete", "Please answer all questions.")
            return

        q3_val = self.q3_var.get()
        if q3_val == 0:
            messagebox.showwarning("Incomplete", "Please answer the emotional intelligence question.")
            return
        values.append(q3_val)

        if q3_val >= 4:
            q4_val = self.q4_var.get()
            if q4_val == 0:
                messagebox.showwarning("Incomplete", "Please answer the follow-up question.")
                return
            values.append(q4_val)

        self.controller.user_answers["Overall Intelligence"] = values
        self.controller.next_page()

class ReviewPage(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller
        ttk.Label(self, text="Review and Submit", font=("Helvetica", 16)).pack(pady=20)
        ttk.Button(self, text="Finish", command=self.show_results).pack(pady=10)

    def show_results(self):
        filename, average_score = self.controller.generate_radar_chart()
        grade = ''
        if average_score >= 4.5:
            grade = 'A'
        elif average_score >= 3.5:
            grade = 'B'
        elif average_score >= 2.5:
            grade = 'C'
        elif average_score >= 1.5:
            grade = 'D'
        elif average_score >= 1.0:
            grade = 'E'
        else:
            grade = 'F'

        message = f"Results chart saved as {filename}\nOverall Grade: {grade}"
        if grade in ['C', 'D', 'E', 'F']:
            message += "\nMAKE SURE TO WORK ON YOURSELF"

        messagebox.showinfo("MPE", message)

if __name__ == "__main__":
    app = MPEWizardApp()
    app.mainloop()
